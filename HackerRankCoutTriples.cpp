#include <string>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <numeric>
#include <list>
#include <algorithm>
#include <iterator>
#include <exception>
#include <fstream>
#include <utility>
#include <list>
#include <map>
#include <set>
#include <sstream>
#include <memory>
#include <queue>
#include <unordered_set>
#include <unordered_map>
#include <stack>
#include <algorithm>
#include <thread>
#include <atomic>
#include <random>
#include "mat3x3.h"
#include "vec3.h"

//typical cmd line compile : g++ --std=c++14 -O0 -Wall -Wextra -fsanitize=address -g main.cpp -o run

using namespace std ;

struct AVLTree {
  struct Node  {
    int key; uint height;
    uint fatSize ; uint leftSize; 
    Node * parent ; uint rightSize ;
    Node *left; Node *right;
    size_t level ;

    Node ( int key = 0, size_t level = 0 ) { 
      this->key = key ; this->level = level ; this->parent = NULL ; this->left = NULL ; this->right = NULL ;
      this->height = 1 ; this->leftSize = this->rightSize = 0 ; this->fatSize = 1 ;} 
  };
  Node * root ;
  AVLTree ( ){ root = NULL ;} 
  ~AVLTree () {
    queue<Node *> q ; q.push( root ) ;
    while ( !q.empty()) {
      Node * temp = q.front() ;
      if ( temp->left != NULL) q.push ( temp->left );
      if ( temp->right != NULL ) q.push ( temp->right ) ;
      q.pop () ;
      delete temp ;
    }
    printf ( "AVLTree Deleted\n") ;
  }

  inline int getBalance(Node * N) {  
      if (N == NULL) return 0;  
      return (N->left ? N->left->height : 0) - (N->right ? N->right->height : 0) ;
  }  
  
  Node *rightRotate(Node * y)  {  
      //cout << "rightRotate" << endl ;
      Node * yParent = y->parent ; Node * x = y->left;  Node *T2 = x->right;
      x->parent = yParent ; x->right = y; 
      y->left = T2; y->parent = x ;
      if ( T2 != NULL ) { 
        T2->parent = y ; y->leftSize = T2->fatSize + T2->rightSize + T2->leftSize ; 
      }
      else y->leftSize = 0 ;

      siftUpSize ( y ) ;
      
      y->height = max(y->left ? y->left->height : 0, y->right ? y->right->height : 0) + 1;  
      x->height = max(x->left ? x->left->height : 0, x->right ? x->right->height : 0) + 1;   
      return x;  
  }  
  
  Node * leftRotate(Node * x) { 
      //cout << "leftRotate" << endl ; 
      Node * xParent = x->parent ; Node *y = x->right;  Node *T2 = y->left;
      y->parent = xParent ; y->left = x; 
      x->right = T2; x->parent = y ;
      if ( T2 != NULL ) { 
        T2->parent = x ; x->rightSize = T2->fatSize + T2->rightSize + T2->leftSize ; 
      }
      else x->rightSize = 0 ;

      siftUpSize ( x ) ;
    
      x->height = max(x->left ? x->left->height : 0, x->right ? x->right->height : 0) + 1;  
      y->height = max(y->left ? y->left->height : 0, y->right ? y->right->height : 0) + 1; 
      return y;  
  }  

  inline void siftUpSize ( Node * node ) {
    char fromLeftOrRight ;
    while ( node->parent != NULL ) {
      size_t tempSize = node->fatSize + node->leftSize + node->rightSize;
      // 0 == right , 1 == left
      fromLeftOrRight = node->parent->left == node ? node->parent->leftSize = tempSize:
                                                     node->parent->rightSize = tempSize; 
      node = node->parent ;
    }
  }

  //wrapper function
  Node * insert ( int key ) {
    root = inserter ( key , root ) ;  
    return root ;
  }

  //delegate function
  Node* inserter( int key, Node * node , Node * nodeParent = NULL ,size_t level = 0 )  {  
      //cout << " inserter call " << key << endl ;
      if (node == NULL) {
        if ( root == NULL ){ root = new Node ( key ) ; return root  ; }
        else { node = new Node ( key, level ) ; node->parent = nodeParent; siftUpSize( node); return node ; }
      }
    
      if (key < node->key) node->left = inserter(key, node->left, node , ++level );  
      else if (key > node->key) node->right = inserter( key, node->right, node , ++level);  
      else  {
        node->fatSize ++ ; siftUpSize ( node );
      } 
      
      node->height = 1 + max(node->left ? node->left->height : 0 , node->right ? node->right->height : 0);
      int balance = getBalance(node);  
      //cout << " mid inserter call " << key << " " << node->height << endl ;
      
      if (balance > 1 && key < node->left->key) return rightRotate(node);    
      if (balance < -1 && key > node->right->key) return leftRotate(node);
      if (balance > 1 && key > node->left->key)  {  
          node->left = leftRotate(node->left); return rightRotate(node);  
      }  
      if (balance < -1 && key < node->right->key)  {  
          node->right = rightRotate(node->right); return leftRotate(node);  
      }  

      return node;  
  }  

  size_t getSizePrior (int key) {
    size_t sum = 0 ;
    Node * node = root ;
    while ( node != NULL ) {
      if ( key > node->key ){ sum += node->fatSize + node->leftSize ; node = node->right ;}
      else if ( key < node->key ) node = node->left ;
      else { sum += node->fatSize + node->leftSize ; node = NULL; }
    }
    return sum ;
  }
  void preOrder(Node * node)  {  
      if(node != NULL) { 
          printf ( "%d %zu %d %d %d\n" ,node->key, node->level,node->fatSize,node->leftSize,node->rightSize)  ;
          preOrder(node->left);  
          preOrder(node->right);  
      }  
  }
  void inOrder(Node * node)  {  
      if(node != NULL) {
          inOrder(node->left);  
          printf ( "%d %zu %d %d %d\n" ,node->key, node->level,node->fatSize,node->leftSize,node->rightSize)  ;
          inOrder(node->right);  
      }  
  }
  void postOrder(Node * node)  {  
      if(node != NULL) {
          postOrder(node->left);  
          postOrder(node->right);  
          printf ( "%d %zu %d %d %d\n" ,node->key, node->level,node->fatSize,node->leftSize,node->rightSize)  ;
      }  
  }
};

long countTriplets(vector<long> arr, long r) {
  vector <int> vV = { 1,2,2,4} ;
  long cnt = 0 ;
  vector<pair<long,size_t>> vS ( 0 ) ;
  unordered_map < long , AVLTree * > hM = {} ;
  for ( size_t i = 0 ; i < arr.size() ; ++ i ) vS.push_back ( { arr[i], i });
  stable_sort ( vS.begin(), vS.end() ) ;
  for ( size_t i = 0 ; i < vS.size() ; ++ i ) {
      for ( size_t j = i + 1 ; j < vS.size() and vS[i].first * r >= vS[j].first ; ++ j){
          if ( vS[i].first * r == vS[j].first and vS[i].second < vS[j].second and j < vS.size() - 1 ) {
            if ( hM.find ( vS[j].first * r) != hM.end()){
              hM[vS[j].first * r]->insert (vS[j].second ) ;
            }
            else {
              AVLTree * avt = new AVLTree () ;
              hM.insert ( { vS[j].first * r , avt });
              hM[vS[j].first * r]->insert ( vS[j].second) ;
            }
          }
      }
  }
  //hM[1]->inOrder( hM[1]->root ); printf( " \n"); hM[1]->preOrder( hM[1]->root ); printf ( "root %d\n", hM[1]->root->key);
  for ( size_t i = 0 ; i < vS.size() ; i++) {
      if ( hM.find ( vS[i].first) != hM.end() ) 
        cnt += hM [ vS[i].first]->getSizePrior ( vS[i].second-1); 
  }
  return cnt ;

}

//int main(int argc, char *argv[]) {
int main() {

    //vector<long> v = { 1,1000000000,100000,100,100,10,100,1000000000,100,10000000,100000000,100000000,10000000,1,1000,100000000,10000000,1000000,100,1,100000,10000,100000,10000,10000000,10,100,1000000,1000,10000,10,1000000,1000,1000000000,1,10000000,1,10000,10000000,100,10,10000000,100,10,10000000,100000,1000000000,10000,10000,10,1000000,1000000000,10000000,10,1000000,10000,100000,100000000,100,100000000,10000,100000,1000000,1,10000,1000000000,10000000,1000000,1000,1000000,1,100000,10000,1000,1000000,10,1,100000,100000000,10000,100000000,1000000,1000000,100000,100000000,10000,10,100000,100,1000,1000,100000000,100000000,100,100000000,1000,10,1000000,10,10000,10000,100,10,100000000,100000,10000000,100,100000,10000,100,1,10000,100000000,100000000,1000000000,100000000,100,1,1000,1000000,100000,1000000000,10000,10000,10,100000,1000000000,100,1000,1,100000000,10000000,100,1,100000000,1000000000,1000000000,100,100000,1000000,1000000,10000000,100,10000,100000,10000,100000,10000000,10000,1,1000,100,1000000000,1000000000,1000000,1,10000,10000000,10000,10000000,10000000,100000,10000000,100,10000000,100000,10,100000000,10000000,1000000,10000,1000,100000,10000000,1000000000,1,10,1000000,1000000000,10000000,10000000,10000,10,100000000,10000,10000000,1000000000,1,1000000,100000,1,1000000,1,10000000,100000000,10000000,100,10,1000000,10,1,100,1000000,100000,10,10000000,1000000,100,10000,100000,100,10,100,1000,1000000000,1000000,1000,1,100000000,1000000000,100000000,100000000,100000,100000000,100000,100000,1000000,10000000,10000000,10000,1,1000000000,1000000,1000000,10000,100000000,10000,100,100,100000000,1,10000,10,100,1,100,1,100000,100000,100000000,1000000,1000,10000000,10000,10,100,1000000000,1000000000,100,100000000,100000,100,10000000,100,1000000000,10000,1,100000,1000000,10000,100000,1000000,10,1000000,1,10,1,1,100000000,10000000,1000000000,10000,1,1000000,100000000,10000,100000000,1,100000,1,100000000,10,100000,100000000,1000,1000000,100,100000,10,1,1000000000,1000000,1000000000,100,10000,1000000000,100000,1000000,1,1000,10000,10,100000000,1000000,10000000,100000000,1,10000000,100000000,100000000,1,1000000000,1000000000,100000,1000000000,10000,10,1000,10,10000,1000,100,100,10000,100000,100000000,10000,1,10000,1000000,1000000,1,10000000,10000,10000000,1000000,10000,1000000000,1000,100000,10000000,1000,1000000,1000000,1,100000,100,1000,1,100000,1000000000,100000,100000000,10,1,100000,10,1000000,100000,1000000,100,10,100000000,10,10000000,100000,10000000,10000,100000,1,1000000000,10000,1000000,10000000,1000,100000000,100,100000,100,10000,10,10,1000000000,10,100000,1000000000,1000000,1000000,100000,1000,10000,1000000000,10000000,1000,1,1000000,1,1000000000,100,100000,100,10,1,100000000,100000000,1000,1000000,100,1,1,1000000,1000,100,100000000,10000,10000000,10000000,100,100000,100000,100000000,1,10000,10000000,1000,100000,1000,1000,10000,1000000,10,1000000,1000000000,1000,1000000,1,100000000,100000,10000,1,100000,1000,10000,1000000000,10,1,100000000,100000000,100000,10000,1000,1000,10000,1,100,1000000000,10000000,100000,10000,10,1000,10000000,1,100000,100,100000000,10000000,1,1000,10,10,10,1000000,10000000,1,10000000,1000000000,1000000000,100000000,10000,100000,1000,1000000000,10,1000,10,1,1,1000000000,1000000,10000,10000,10000,1000000,1000000000,1000000,1000000,1000000,1000000000,1,1,100,1000,1000000,1000000000,1000,1000000,1,10000,10000,100000,10,1000000000,1000000,100,100000,100000000,100,10000000,1000000000,10,10,1000,100000,1000000000,100000,1000,1000000,10,100,100000000,1000,1000000,10,100,10000000,1000000,100000000,100000000,1000,10000,100000,10000,100000,10,10000000,1,10,1000000000,100000000,1,1,10,10000,10000000,10,1000000000,1000,1000000000,100,100000,10000000,100000000,10000,100000000,1,10,1000000,1,1000000000,1000000000,10000,10000,10000,1000000000,100000000,10,100,1000000000,100,1,100,100000,10,1000000,100,10000,10000000,100000,1000,10,1000,1,1000000000,10000000,1,10,1,10000000,10,1,1000000,10000000,1000000,1,1000000000,10000,1000,10,1000000,1000000,1000,100000000,10,1000000,1000000,1000,10,1000,10,10000,1000000,1000000,10000000,100000000,100000,10000000,1000000000,100000,1000000,1000,10000000,100000,100,10000,100000,1000,1,1000000000,10000,1000000,100000,1000000000,10000,100000000,1000000,1,1000,10000000,100000,1000000,1000,100,100,1,100,1000000000,1,10,100000,100000000,1000000,10000,1000,1000000000,100000000,1000000000,10000,1000000000,1,10,10000000,10000000,1,100,10000000,1000000,10000,1,100000,1,10000000,1000000000,10000,10,10,1000000,10,10,1000000000,100000000,1,1000000,100,100000,10000000,1000,1000000,1000,10000,1000000,10000,10,100000,100000,1000,100,10,100000000,100000,1000000000,1,100,100000000,10000,1000,1000000000,1,10000,1000,10,10000,100000,1000000000,10000000,1,100000000,1,10000000,100,1000000,100000,1000000,10000000,1000,10,10,10000000,100000,10,100,10000,10,10000,10000,100000,1,100000,10000000,1000000,1,100000000,10,100000,1,1,100000000,100000000,100,10000000,1,100000000,10000,10000000,100000,10000000,100000000,1000000,10000000,100000,1000000000,1000000000,1000000000,1,1000000,100000,10000000,1000000,10,1000000,100,10,10000000,100000,1000000000,10000000,100000,10000000,100000,10000000,1000000,1000000,100000,1,100000,10,1,100000,1000000000,10000000,10,1000000000,100000000,100,10,1000000,100000000,10,100,1000000000,1000000000,10000000,1,1000000,100,1000000000,100000,1,100000000,10,10000000,10000,1000000000,1000,100000,1000000,1000000,10000000,10,100000,1000000,100,1000000,1000000,100000,1,1000,1000,1000,10000000,100,100,10000,10000,1000000000,1000000000,10000,10000,1000000000,10000,10000000,100000000,1000000000,100000000,1000,1000000,10000,1000000000,1000,1000000,10000000,10,1,100000,10000000,100000,100000,1,1,100000000,100000000,10000,10,10000,1000000000,100,100000,100000,100000000,1000000,1000000000,100000000,100000,1,1000000,1,1000000,1000,1,10,1000000000,10000000,100,10,10000,1,10000000,1,100,10000000,1,100,10000,1000,10000000,1000,100000,10000,1,1000000,10,1000000000,10000,100000000,1,100,100000000,100000000,100000,100000000,1,1000000,10000000,100,100000000,100,10000,10000000,10000,1000000000,1000000,10000,10,1,1,1,1000,10000000,100000,1000,1000,100000000,100000,1000000000,1000000,10000000,100,10000,100000,1000000000,100000,100000,100000000,10000,1,100000000,100000000,1000000,100000,10000,100000,10,10,1000000000,10000,10,10,10000000,100000000,100000000,1000,100,1000000,1,1000,10000,10000000,10000000,10,100,10000000,1000000,100000000,10000000,100,1,100000,10,1000000,100,100000,10000,1000,100000000,100000,10000000,1000000000,1000000,10000000,100000000,10000000,100,100,1000,100,100000,1,1000000000,100000,10,1000,10000,1000000000,10,10,10,1000,100000000,10000,1,1,100,1000000,100000,1,1000,100000,1,1000000000,10000,1,100000000,1000000,10000,10000,1,10,10000,1000000000,1000000,100000,100,1,10000,1000000,1000,10000000,10,10,100,10,1000,10000,1000000000,1000000000,10000,100,1000000,1000000,10000,1,1000000,100,100000000,1,100000000,100000000,100,100,1000000000,1,1000000000,1000,10,1000,10,10000,1000,1000,100000000,100000,1000000,10,1000000000,1000000,1,100000,1,100000000,10000,10000,100000000,1,1000000000,1000000,1000,10000000,10000,10000000,1,1000,10000000,1000000000,1000000000,1,100000,1,10000000,100000000,1000,100000,100000,1,1000000,1000000,1000000,1000000000,10,1000000,10000000,100000,1000,100000000,100000000,100,10000,1000,10,10,100,10,1000000,1000000000,1000,100000,1,1,1000000,10000000,1,10,10000,100000,10,100,10,1000000000,1000,10000,100000000,1000,100,1000,10,1,10000000,100000,100000,100000000,100000000,10000000,100,100000,100000000,10000000,100,1,10000000,1,10000000,1000000000,100,1000,10000,100000,1000000,10000000,10000000,1000000000,10,10000000,100,1000,1,100000,100000,10000000,1000,100,10000000,10,1000000000,1000000000,100000000,100000000,1000000,10,100000000,100000,1000,100000000,10000,100000,1000,1,1000,1000000000,10000000,100,10,10,1000000000,100000,1000000,10,10,100,1,10000,10000,10000000,10000000,1000000,1000000000,1000000,1000000,10000000,1000000000,10000,1000,100,10000,1000000000,1,100000000,100,100000,1000000000,1000000000,10000000,1,100,100000000,100000000,1000000000,1000000000,10,10,1000000000,10000000,10000000,1000000,10000,1000,10000000,100,10,100000,10,1000000,100000000,1000000,100,1000000000,100000000,1,10,1000,100,1000,100,10000,100000,1,100,10000,1000000000,1000,100000,1,1,100000,100000000,10000000,1,1000000,1000000000,100,10,1000,1,10,1000000000,100,1,1000000000,100000,10000,10000,10000000,10000000,1000000,10,100,100000000,1000000,1000000000,10000000,1000000000,1000000,1000000000,100,10,10000000,1000000000,10000,100000,100000000,1000000,1000000,1000,100000000,1000000000,100,1,100,1000,10000000,1000000,10000000,1000000,100000,1000,1,1000000000,1000,1000000,100000000,100,10000000,100000,10,10,1000000,10,1,1,1000000,10,100000000,100000,10000,1000000,10000,1000000000,1000000000,1000000,100,1000000,10000,100,100000,10,10000000,100000,10,10,1000,1000000000,1000,100,10000,100000,10000,1000,1000000,1000000,100000,10000,10000000,10000,1000000000,10000,1,10000,100000,10,100,1000000000,1,1000000000,10,100000,1,10,100,10,100,100000,1000,100000,1000000000,10000000,100,1000,100,1,100,100000000,100000,10,100,1000000,100000,10000,100,100,1000000,100000,100,1000000,1000000,1000,1000,100000000,10000,100000,100,100000000,100,100000,1000000,10,10000,1,10000000,10000000,10,1000000000,10000000,100000000,1,10,10000,100000000,100000,10000000,1,1000,10000,10000,10,100,1,10000,1,1000000,10,100,100000,1000,10000000,10,100000,10000,10,10000,10,10000,100000,1,10000,100000,10,1000000000,100000,1000000,100000000,100000000,100,10000,100,1000,1000000,100,1,1000000,1000000000,10,1000000000,1000000,10000000,100000000,1000000000,100,100,100,100000000,100000,10000000,1000,100000,1000,1,1000000,10000,1000000,100000,100,1000000,1000000000,1000000,1,100,10000,100000,10000,10,10000,100000000,100,100,100000,100,10,1000000000,100000,1000,10000000,100,100,1,1,1000000,1,100000000,1,100000000,1000,100000,1000000,100,10,10000000,10000000,100000000,100,1000,1000000000,100000000,10,1000,1,100000000,100000,10,10000000,100,1000000,10000,10000000,1000000000,1000000,10000000,10000000,1000000000,100000,10000000,10000000,10,100,1000000,100000,1000000,1000,10000,10000,100000,1,100000,100000,10,100000000,100000,1,100000,100000000,1000000000,100000000,1000000,1000000,100000,10000000,100,100,10000,10,1000000000,10000,10,100,100000000,10000000,100000000,1000000,100,10000,100,10000000,10000,10000000,10000,100000000,10000000,10,1,1000,10,1000000000,1000,10000000,100000,100000000,100000,1,100,10,10,1000,10000000,10000,1000000,1000000,10,1000000,10000,1000,1,10000000,100,100000,1000000,1000000,100000,10000,1000000000,100000,1000000000,1,1000000,100,100000000,100,100,100000,100,10000,100000000,100000,10000000,1000000,1,1000,10000,1000,1000000000,100000000,10000000,100,100000,10,1000000000,100,1,10000,100000000,1000000000,1000000000,1000000000,100,100000} ;

    //printf ( "%ld\n" , countTriplets ( v , 10 )) ;

   

    //AVLTree avt ; 
    /*
    avt.insert(10); 
    avt.insert(20);
    avt.insert(30);
    avt.insert(40);
    avt.insert(50);
    avt.insert(25);

    avt.preOrder(avt.root);  
    cout << endl ;
    avt.inOrder(avt.root);  
    cout << endl ;
    */
    
    return 0 ;
}